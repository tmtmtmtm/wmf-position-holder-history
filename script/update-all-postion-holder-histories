#!/usr/bin/env ruby
require 'bundler/setup'
require_relative '../lib/load_environment_from_yaml'

require 'wikidata_position_history'
require 'mediawiki_api'

class EmbeddedSearch
  WIKI_SITE = 'www.wikidata.org'
  WIKI_USERNAME = ENV['WIKI_USERNAME']
  WIKI_PASSWORD = ENV['WIKI_PASSWORD']

  def initialize(template, eicontinue=nil)
    @template = template
    @eicontinue = eicontinue
  end

  def pages
    response_pages + extra_pages
  end

  private

  attr_reader :template, :eicontinue

  def client
    @client = MediawikiApi::Client.new("https://#{WIKI_SITE}/w/api.php")
  end

  def logged_in_client
    @logged_in_client ||= begin
      li_response = client.log_in(WIKI_USERNAME, WIKI_PASSWORD)
      abort "MediawikiApi::Client#log_in failed: #{response}" unless li_response['result'] == 'Success'
      client
    end
  end

  def response
    @response ||= client.action(:query, client_args)
  end

  def client_args
    { list: 'embeddedin', eititle: template, eilimit: 500, eicontinue: eicontinue }.compact
  end

  def continue_response
    # there must be a way to get this without calling a private method!
    response.send(:response_object)['continue']
  end

  def response_pages
    abort "Failed to find pages embedding #{template}" unless response.success?

    response.data['embeddedin'].map do |ei|
      { mediawiki_site: WIKI_SITE, page_title: ei['title'] }
    end
  end

  def extra_pages
    return [] unless continue_response

    self.class.new(template, continue_response['eicontinue']).pages
  end
end

pages = EmbeddedSearch.new('Template:PositionHolderHistory').pages

pages.reverse.each_with_index do |page, i|
  puts "  Updating #{page[:page_title]} (#{i + 1} of #{pages.count})"

  rewriter = WikidataPositionHistory::PageRewriter.new(page)

  begin
    rewriter.run!
  rescue => e
    warn "Error updating #{page[:page_title]}: #{e.message}"
  end
end
